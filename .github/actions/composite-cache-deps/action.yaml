name: Cache Node and NPM dependencies
description: "This action allows to cahch both Node and NPM dependencies based on the package-lock.json file."

inputs:
  node-version:
    description: NodeJS version to use
    required: true
    default: 20.x
  working-dir:
    description: The working directory of the application
    default: .
    required: false
  target-env:
    required: false
    description: '"dev" or "prod". Controls whether dev dependencies are installed'
    default: dev

outputs:
  installed_deps:
    description: Whether dependencies were installed or not
    value: ${{ steps.cache.steps.cache.outputs.cache-hit != 'true' }}

runs:
  using: composite
  steps:
    - name: Setup NodeJS version ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    - name: Cache Dependencies
      id: cache
      uses: actions/cache@v4
      with:
        key: deps-node-modules-${{ inputs.target-env }}-${{ hashFiles(format('{0}/{1}', inputs.working-dir, 'package-lock.json')) }}
        path: ${{ inputs.working-dir }}/node_modules
    # - name: Install Dependencies Dev
    #   if: ${{ steps.cache.outputs.cache-hit != 'true' && inputs.target-env == 'dev' }}
    #   working-directory: ${{ inputs.working-dir }}
    #   shell: bash
    #   run: |
    #     npm ci
    # - name: Install Dependencies Prod
    #   if: ${{ steps.cache.outputs.cache-hit != 'true' && inputs.target-env == 'prod' }}
    #   working-directory: ${{ inputs.working-dir }}
    #   shell: bash
    #   run: |
    #     npm ci --omit=dev
    - name: Install Dependencies Unified
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ inputs.working-dir }}
      shell: bash
      ## checks variables values: implicit if target is dev than do npm ci, else if target is prod than do npm ci --omit=dev
      run: ${{ inputs.target-env == 'dev' && 'npm ci' || inputs.target-env == 'prod' && 'npm ci --omit=dev' }}