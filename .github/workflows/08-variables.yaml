name: 08 - Using Variables

on:
  push:
  workflow_dispatch: 

env:
  WORKFLOW_VAR: "I'm a workflow env var"
  OVERWRITTEN: "I'll be overwritten"
  UNDEFINED_VAR_WITH_DEFAULT: ${{ vars.UNDEFINED_VAR || 'default_value'}}

jobs:
  echo:
    runs-on: ubuntu-latest
    env:
      JOB_VAR: "I'm a job env var"
      OVERWRITTEN: "I've been overwritten at the job level"
    steps:
      - name: Print Env Variables
        env:
          STEP_VAR: "I'm a step env var"
          step_var2: "I'm another step env var"
         # OVERWRITTEN: "I've ovewritten at the step level"  
        run: |
          ## when referring the workflow env values, you must use '${{ env.VARIABLE_NAME }}', or simple $VARIABLE_NAME
          ## use vars.MY_ORG_REPO_ENVIRONMENT for vars from the Organization, Repository or Envorinment variables, set outside the workflow
          echo "Step env var: ${{ env.STEP_VAR }}"
          echo "Step env var2: $step_var2"
          echo "Job env var: ${{ env.JOB_VAR }}"
          echo "Workflow env var: $WORKFLOW_VAR"
          echo "Overwritten env var: $OVERWRITTEN"
      
      - name: OverWrite Job Variable
        env: 
          OVERWRITTEN: 'I have been overwritten at the step level'
        run: |
          echo "Step env var: ${{ env.OVERWRITTEN }}"

  echo2: 
    runs-on: ubuntu-latest
    steps:
      - name: Print Variables
        run: |
          echo "repo var: ${{ vars.REPOSITORY_VAR }}"

  echo-prod: 
    runs-on: ubuntu-latest
    environment: prod
    env:
      OVERWRITTEN_ENV_VAR: ${{ vars.OVERWRITTEN_VAR || 'default_environment_value' }}
    steps:
      - name: Print Prod Variables
        run: |
          echo "Org Overwritten var: ${{ env.OVERWRITTEN_ENV_VAR }}"
          echo "repo var: ${{ vars.REPOSITORY_VAR }}"
          echo "Environment var: ${{ vars.TARGET_VAR }}"

  echo-undefined:
    runs-on: ubuntu-latest
    steps:
      - name: Print Undefined Variables
        run: |
          echo "Org var: ${{ env.UNDEFINED_VAR_WITH_DEFAULT }}"
